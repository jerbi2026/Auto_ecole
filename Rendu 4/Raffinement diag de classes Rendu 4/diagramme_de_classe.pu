@startuml

abstract class Personne {
    # nom: String
    # prenom: String
    # email: String
    # mop: String
  
    + s'authentifier(nom:String,mop:String) : boolean 
    + consulterInformations(): String
    + modifierInformations(): void

    
}

class Instructeur<< Role >> {
    - id_instructeur : int

    - consulterInformations(): String
    - modifierInformations(): void
     + consulterCours(): List<Cours>
    + creerCours(Cours: Cours): void
    + modifierCours(Cours: Cours): void
    + supprimerCours(Cours: Cours): void

    
}

class Admin << Role >>{
    - id_manager : int

    
    + consulterEleves(): List<Eleve>
    + creerEleve(eleve: Eleve): void
    + modifierEleve(eleve: Eleve): void
    + supprimerEleve(eleve: Eleve): void

    + consulterInstructeur(): List<Instructeur>
    + creerInstructeur(Instructeur: Instructeur): void
    + modifierInstructeur(Instructeur: Instructeur): void
    + supprimerInstructeur(Instructeur: Instructeur): void

}

class Eleve << Role >>{
    - id_eleve : int
    - progression: String
    - listeCours: List<Cours>

    + consulterInformations(): String
    + modifierInformations(): void
    + sInscrireCours(cours: Cours): void
    + suivreCours(cours: Cours): void

  
}

class Cours << Ressource >>{
    - id: int
    - dateDebut: Date
    - dateFin: Date
    - nomCours: String
    - id_instructeur: int
    - listeEleves: List<Eleve>
    - listeEvaluations: List<Evaluation>
    - horraires: Horraire

    + annulerCours(): void
    + modifierCours(): void

    
}

class Evaluation << Ressource >>{
    - idEval: int
    - dateEval: Date
    - description: String
    - note: int
    - id_eleve : int

    + ajouterNote(eleve: Eleve, note: int): void
    + consulterNotes(): List<int>

    
}


class Reservation << Ressource >>{
    - id: int
    - eleve: Eleve
    - cours: Cours
    - dateReservation: Date

    + ajouterReservation(Reservation : Reservation): void
    + supprimerReservation(Reservation : Reservation): void
    + modifierReservation(Reservation : Reservation):void
    + annulerReservation(): void

   
}


class ConnexionDemande << Utilitaire >>{
    - email: String
    - motDePasse: String

    + authentifier(email: String,motDePasse: String): void
    + reinitialiserMotDePasse(): boolean

    inv email_non_vide: email <> ""
    inv motDePasse_non_vide: motDePasse <> ""
}

class Horraire << Ressource >>{
    - id: int
    - jour: String
    - heureDebut: String
    - heureFin: String

    + creerHorraire(jour: String, heureDebut: String, heureFin: String): Horraire
    + lireHorraire(id: int): Horraire
    + mettreAJourHorraire(id: int, jour: String, heureDebut: String, heureFin: String): void
    + supprimerHorraire(id: int): void

    
}





class Contact  << Utilitaire >>{
    - nom: String
    - prenom: String
    - email: String
    - message: String

    + envoyerMessage(Contact : Contact): void
    + ConsulterMessage(): List<Contact>

    

}


interface AutoEcole {
    + creerEleve(nom: String, prenom: String, email: String, mop: String): Eleve
    + supprimerEleve(eleve: Eleve): void
    + creerInstructeur(nom: String, prenom: String, email: String, mop: String): Instructeur
    + supprimerInstructeur(instructeur: Instructeur): void
    + creerReservation(eleve: Eleve, cours: Cours, dateReservation: Date): Reservation
    + annulerReservation(reservation: Reservation): void
    + creerConnexionDemande(email: String, motDePasse: String): ConnexionDemande
    + supprimerConnexionDemande(demande: ConnexionDemande): void
    + envoyerMessage(nom: String, prenom: String, email: String, message: String): Contact
}


note "La classe ConnexionDemande gère les demandes de connexion des utilisateurs et permet l'authentification ainsi que la réinitialisation des mots de passe." as NoteConnexionDemande
note "La classe Reservation gère les réservations des élèves pour les cours." as NoteReservation
note "La classe Evaluation gère les évaluations des élèves dans le cadre des cours." as NoteEvaluation
note "La classe AutoEcole agit comme une interface centralisée pour la gestion de toutes les opérations liées à une auto-école. Elle fournit des méthodes pour consulter et gérer les informations des élèves, des instructeurs, des cours, des réservations, des demandes de connexion et des contacts." as AutoEcoleNote


note "Invariant : Chaque réservation doit être associée à un élève et à un cours valides." as reservation_invariant
note "Invariant : Chaque demande de connexion doit avoir une adresse e-mail non vide." as connexion_demande_invariant
note "Invariant : Chaque personne doit avoir un nom et un prénom non vides." as personne_invariant


Personne <|-- Instructeur
Personne <|-- Eleve
Personne <|-- Admin
Reservation "1" -- "1" Admin : "gerer"
Instructeur "1" -- "*" Cours : "enseigne"
Eleve "1" -- "*" Cours : "suit"
Admin "1" -- "*" Cours : "gerer"
Evaluation "1" -- "1" Eleve : "est evalué"
Evaluation "1" -- "*" Cours : "appartient à"
Admin "1" -- "*" Instructeur : "consulte"
Admin "1" -- "*" Eleve : "consulte"
Horraire "1" -- "*" Cours : "appartient à"
Contact "0..*" -- "1" Admin : "est géré par"

NoteConnexionDemande -- ConnexionDemande
NoteReservation -- Reservation
NoteEvaluation -- Evaluation
AutoEcoleNote -- AutoEcole

reservation_invariant -- Reservation
connexion_demande_invariant -- ConnexionDemande
personne_invariant -- Personne



AutoEcole o-- "*" Personne : "contient"
AutoEcole o-- "1..*" Reservation : "contient"
AutoEcole o-- "1..*" ConnexionDemande : "contient"
AutoEcole o-- "1..*" Contact : "contient"

@enduml
