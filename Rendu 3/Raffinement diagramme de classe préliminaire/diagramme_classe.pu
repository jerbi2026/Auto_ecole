@startuml

abstract class Personne {
    + nom: String
    + prenom: String
    + email: String
    + mop: String
  
    + s'authentifier(nom:String,mop:String) : boolean 
    + consulterInformations(): String
    + modifierInformations(): void
}

class Instructeur {
    + id_instructeur : int

    + consulterInformations(): String
    + modifierInformations(): void
     + consulterCours(): List<Cours>
    + creerCours(Cours: Cours): void
    + modifierCours(Cours: Cours): void
    + supprimerCours(Cours: Cours): void
}

class Admin {
    + id_manager : int

    
    + consulterEleves(): List<Eleve>
    + creerEleve(eleve: Eleve): void
    + modifierEleve(eleve: Eleve): void
    + supprimerEleve(eleve: Eleve): void

    + consulterInstructeur(): List<Instructeur>
    + creerInstructeur(Instructeur: Instructeur): void
    + modifierInstructeur(Instructeur: Instructeur): void
    + supprimerInstructeur(Instructeur: Instructeur): void
}

class Eleve {
    + id_eleve : int
    + progression: String
    + listeCours: List<Cours>

    + consulterInformations(): String
    + modifierInformations(): void
    + sInscrireCours(cours: Cours): void
    + suivreCours(cours: Cours): void
}

class Cours {
    + id: int
    + dateDebut: Date
    + dateFin: Date
    + nomCours: String
    + id_instructeur: int
    + listeEleves: List<Eleve>
    + listeEvaluations: List<Evaluation>
    + horraires: Horraire

    + annulerCours(): void
    + modifierCours(): void
}

class Evaluation {
    + idEval: int
    + dateEval: Date
    + description: String
    + note: int
    + id_eleve : int

    + ajouterNote(eleve: Eleve, note: int): void
    + consulterNotes(): List<int>
}


class Reservation {
    + id: int
    + eleve: Eleve
    + cours: Cours
    + dateReservation: Date

    + ajouterReservation(Reservation : Reservation): void
    + supprimerReservation(Reservation : Reservation): void
    + modifierReservation(Reservation : Reservation):void
    + annulerReservation(): void
}

class ConnexionDemande {
    + email: String
    + motDePasse: String

    + authentifier(email: String,motDePasse: String): void
    + reinitialiserMotDePasse(): boolean
}

class Horraire {
    + id: int
    + jour: String
    + heureDebut: String
    + heureFin: String

    + creerHorraire(jour: String, heureDebut: String, heureFin: String): Horraire
    + lireHorraire(id: int): Horraire
    + mettreAJourHorraire(id: int, jour: String, heureDebut: String, heureFin: String): void
    + supprimerHorraire(id: int): void
}



class Contact{
    + nom: String
    + prenom: String
    + email: String
    + message: String

    + envoyerMessage(Contact : Contact): void
    + ConsulterMessage(): List<Contact>

}


interface AutoEcole {
    + Eleve(nom: String, prenom: String, email: String, mop: String): Eleve
    + supprimerEleve(eleve: Eleve): void
    + Instructeur(nom: String, prenom: String, email: String, mop: String): Instructeur
    + supprimerInstructeur(instructeur: Instructeur): void
    + Reservation(eleve: Eleve, cours: Cours, dateReservation: Date): Reservation
    + annulerReservation(reservation: Reservation): void
    + ConnexionDemande(email: String, motDePasse: String): ConnexionDemande
    + supprimerConnexionDemande(demande: ConnexionDemande): void
    + Contact(nom: String, prenom: String, email: String, message: String): Contact
}

Personne <|-- Instructeur
Personne <|-- Eleve
Personne <|-- Admin
Reservation "1" -- "1" Admin : "gerer"
Instructeur "1" -- "*" Cours : "enseigne"
Eleve "1" -- "*" Cours : "suit"
Admin "1" -- "*" Cours : "gerer"
Evaluation "1" -- "1" Eleve : "est evalué"
Evaluation "1" -- "*" Cours : "appartient à"
Admin "1" -- "*" Instructeur : "consulte"
Admin "1" -- "*" Eleve : "consulte"
Horraire "1" -- "*" Cours : "appartient à"
Contact "0..*" -- "1" Admin : "est géré par"

AutoEcole o-- "*" Personne : "contient"
AutoEcole o-- "1..*" Reservation : "contient"
AutoEcole o-- "1..*" ConnexionDemande : "contient"
AutoEcole o-- "1..*" Contact : "contient"

@enduml
